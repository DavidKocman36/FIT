--Database SQL script
--IDS Ctvrty projekt
--Autori: xkocma08, xbabek02

--Smazat vsechny dosavadni entity a vazby, abychom meli cistou databazi
DROP TABLE GrimoarKouzelnikVlastni CASCADE CONSTRAINTS ;
DROP TABLE GrimoarZamestnanec CASCADE CONSTRAINTS;
DROP TABLE GrimoarMisto CASCADE CONSTRAINTS;
DROP TABLE GrimoarKouzlo CASCADE CONSTRAINTS;
DROP TABLE ElementJeVedlejsimElementemKouzlu CASCADE CONSTRAINTS;
DROP TABLE ZamestnanecSpravujeKouzlo CASCADE CONSTRAINTS;
DROP TABLE SvitekKouzelnikVlastni CASCADE CONSTRAINTS;
DROP TABLE ElementKouzelnik CASCADE CONSTRAINTS;
DROP TABLE GrimoarKouzelnikDobitiVazba CASCADE CONSTRAINTS;
DROP TABLE Kouzelnik CASCADE CONSTRAINTS;
DROP TABLE Grimoar CASCADE CONSTRAINTS;
DROP TABLE DobijeciMisto CASCADE CONSTRAINTS;
DROP TABLE Zamestnanec CASCADE CONSTRAINTS;
DROP TABLE Svitek CASCADE CONSTRAINTS;
DROP TABLE Kouzlo CASCADE CONSTRAINTS;
DROP TABLE Element_ CASCADE CONSTRAINTS;
DROP MATERIALIZED VIEW urovne_kouzelniku_mv;

--------------------------------------------------------------------------------
--Vznik entit
CREATE TABLE Kouzelnik (
    KouzelnikID number GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL PRIMARY KEY,
    Jmeno VARCHAR(50) NOT NULL,
    Narozen DATE,
    Heslo VARCHAR(50),
    Uroven INTEGER,
    Mana DECIMAL(8,2),
    Typ VARCHAR(50) CHECK( Typ IN ('vyskoleny', 'rozeny', 'vyskoleny-a-rozeny') ),
    Rod VARCHAR(50),
    Skola VARCHAR(50),
    Titul VARCHAR(50),
    RodneCislo VARCHAR(10),
    CONSTRAINT Rodne_Cislo_Check CHECK(REGEXP_LIKE(
            RodneCislo, '^[0-9][0-9](0[0-9]|[1368][0-2]|[257][1-9])(0[1-9]|[12][0-9]|3[01])[0-9]{3}[0-9]?$'
            ))
);

CREATE TABLE Element_ (
    ElementID number GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL PRIMARY KEY,
    Typ VARCHAR(50),
    Specializace VARCHAR(50),
    Barva VARCHAR(50)
);

CREATE TABLE DobijeciMisto (
    MistoID number GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL PRIMARY KEY,
    Nazev VARCHAR(50),
    Adresa VARCHAR(50),
    Mira INTEGER,
    ElementID INT,
    CONSTRAINT ElementProsakuje_FK
        FOREIGN KEY (ElementID) REFERENCES Element_ (ElementID) ON DELETE CASCADE
);

CREATE TABLE Kouzlo (
    KouzloID number GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL PRIMARY KEY,
    Nazev VARCHAR(50),
    Slozitost CHAR(2),
    Sila INTEGER,
    Typ VARCHAR(50),
    PrimaryElementID INT,
    CONSTRAINT PrimaryElement_FK
        FOREIGN KEY (PrimaryElementID) REFERENCES Element_ (ElementID) ON DELETE CASCADE
);

CREATE TABLE Grimoar (
    GrimoarID number GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL PRIMARY KEY,
    Stav VARCHAR(50),
    Vydrz DECIMAL(8,2),
    PosledniNabiti TIMESTAMP,
    ElementID INT,
    CONSTRAINT GrimoarElement_FK
        FOREIGN KEY (ElementID) REFERENCES Element_ (ElementID) ON DELETE CASCADE
);

CREATE TABLE Zamestnanec (
    ZamestnanecID number GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL PRIMARY KEY,
    Jmeno VARCHAR(50),
    Narozen DATE,
    Heslo VARCHAR(50),
    RodneCislo VARCHAR(10),
    CONSTRAINT Rodne_Cislo_Check_Zamestnanec CHECK(REGEXP_LIKE(
            RodneCislo, '^[0-9][0-9](0[0-9]|[1368][0-2]|[257][1-9])(0[1-9]|[12][0-9]|3[01])[0-9]{3}[0-9]?$'
            ))
);

CREATE TABLE Svitek (
    SvitekID INTEGER DEFAULT 0 NOT NULL,
    KouzloID INTEGER NOT NULL,
    CONSTRAINT svitek_PK
        PRIMARY KEY (SvitekID, KouzloID),
    CONSTRAINT KouzloSvitek_FK
        FOREIGN KEY (KouzloID) REFERENCES Kouzlo (KouzloID) ON DELETE CASCADE
);

--Deklarace vicenasobnych vazeb

CREATE TABLE SvitekKouzelnikVlastni(
    SvitekID INT,
    KouzelnikID INT,
    KouzloID INT,
    Vlastni INTEGER,
    CONSTRAINT KouzelnikVlastniSvitek_PK
        PRIMARY KEY (SvitekID, KouzelnikID),
    CONSTRAINT SvitekVlastnen_FK
        FOREIGN KEY (SvitekID, KouzloID) REFERENCES Svitek (SvitekID,KouzloID) ON DELETE Cascade ,
    CONSTRAINT KouzelnikSvitek_FK
        FOREIGN KEY (KouzelnikID) REFERENCES Kouzelnik (KouzelnikID) ON DELETE CASCADE
);

CREATE TABLE GrimoarKouzelnikVlastni(
    KouzelnikID INT,
    GrimoarID INT,
    Od TIMESTAMP,
    Do_ TIMESTAMP,
    CONSTRAINT GrimoarKouzelnikVlastni_PK
        PRIMARY KEY (KouzelnikID, GrimoarID),
    CONSTRAINT KouzelnikVlastni_FK
        FOREIGN KEY (KouzelnikID) REFERENCES Kouzelnik (KouzelnikID) ON DELETE CASCADE ,
    CONSTRAINT GrimoarVlastni_FK
        FOREIGN KEY (GrimoarID) REFERENCES Grimoar (GrimoarID) ON DELETE CASCADE
);

CREATE TABLE ElementJeVedlejsimElementemKouzlu(
    ElementID INT,
    KouzloID INT,
    CONSTRAINT ElementJeVedlejsimElementemKouzlu_PK
        PRIMARY KEY (ElementID, KouzloID),
    CONSTRAINT ElementJeVedlejsi_FK
        FOREIGN KEY (ElementID) REFERENCES Element_ (ElementID) ON DELETE CASCADE ,
    CONSTRAINT KouzloMaVedlejsiElement_FK
        FOREIGN KEY (KouzloID) REFERENCES Kouzlo (KouzloID) ON DELETE CASCADE
);

CREATE TABLE ElementKouzelnik(
    ElementID INT NOT NULL,
    KouzelnikID INT,
    CONSTRAINT KouzelnikMaSinergiiSElementem_PK
        PRIMARY KEY (ElementID, KouzelnikID),
    CONSTRAINT ElementMaSinergii_FK
        FOREIGN KEY (ElementID) REFERENCES Element_ (ElementID) ON DELETE CASCADE ,
    CONSTRAINT KouzelnikMaSinergii_FK
        FOREIGN KEY (KouzelnikID) REFERENCES Kouzelnik (KouzelnikID) ON DELETE CASCADE
);

CREATE TABLE GrimoarKouzelnikDobitiVazba(
    KouzelnikID INT NOT NULL,
    GrimoarID INT,
    CONSTRAINT GrimoarKouzelnikDobitiVazba_PK
        PRIMARY KEY (KouzelnikID, GrimoarID),
    CONSTRAINT KouzelnikDobije_FK
        FOREIGN KEY (KouzelnikID) REFERENCES Kouzelnik (KouzelnikID) ON DELETE CASCADE ,
    CONSTRAINT GrimoarDobit_FK
        FOREIGN KEY (GrimoarID) REFERENCES Grimoar (GrimoarID) ON DELETE CASCADE
);

CREATE TABLE GrimoarMisto(
    MistoID INT NOT NULL,
    GrimoarID INT,
    CONSTRAINT GrimoarMisto_PK
        PRIMARY KEY (GrimoarID, MistoID),
    CONSTRAINT MistoDobije_FK
        FOREIGN KEY (MistoID) REFERENCES DobijeciMisto (MistoID) ON DELETE CASCADE ,
    CONSTRAINT GrimoarDobije_FK
        FOREIGN KEY (GrimoarID) REFERENCES Grimoar (GrimoarID) ON DELETE CASCADE
);

CREATE TABLE GrimoarZamestnanec(
    ZamestnanecID INT,
    GrimoarID INT,
    Datum TIMESTAMP,
    CONSTRAINT GrimoarZamestnanec_PK
        PRIMARY KEY (GrimoarID, ZamestnanecID),
    CONSTRAINT ZamestnanecGrimoarUpravil_FK
        FOREIGN KEY (ZamestnanecID) REFERENCES Zamestnanec (ZamestnanecID) ON DELETE CASCADE ,
    CONSTRAINT GrimoarUpravil_FK
        FOREIGN KEY (GrimoarID) REFERENCES Grimoar (GrimoarID) ON DELETE CASCADE
);

CREATE TABLE ZamestnanecSpravujeKouzlo(
    ZamestnanecID INT,
    KouzloID INT,
    Spravuje TIMESTAMP,
    CONSTRAINT ZamestnanecSpravujeKouzlo_PK
        PRIMARY KEY (ZamestnanecID, KouzloID),
    CONSTRAINT ZamestnanecSpravuje_FK
        FOREIGN KEY (ZamestnanecID) REFERENCES Zamestnanec (ZamestnanecID) ON DELETE CASCADE ,
    CONSTRAINT KouzloSpravovano_FK
        FOREIGN KEY (KouzloID) REFERENCES Kouzlo (KouzloID) ON DELETE CASCADE
);

CREATE TABLE GrimoarKouzlo(
    GrimoarID INT,
    KouzloID INT,
    CONSTRAINT GrimoarKouzlo_PK
        PRIMARY KEY (GrimoarID, KouzloID),
    CONSTRAINT KouloObsahuje_FK
        FOREIGN KEY (KouzloID) REFERENCES Kouzlo (KouzloID) ON DELETE CASCADE ,
    CONSTRAINT GrimoarObsahuje_FK
        FOREIGN KEY (GrimoarID) REFERENCES Grimoar (GrimoarID) ON DELETE CASCADE
);

--------------------------------------------------------------------------------
--Vkladani dat
INSERT INTO KOUZELNIK(Jmeno, Narozen, Heslo, Uroven, Mana, Typ, Rod, RodneCislo)
VALUES ('Ondys Veca', TO_DATE('1997-05-29', 'yyyy/mm/dd'), STANDARD_HASH('12trictyri', 'SHA1'), 100, 10.2, 'rozeny', 'Ondysovci', 1707014507);
INSERT INTO KOUZELNIK(Jmeno, Narozen, Heslo, Uroven, Mana, Typ, Rod, Skola, Titul, RodneCislo)
VALUES ('Nitram Ohnùt', TO_DATE('2001-03-08', 'yyyy/mm/dd'), STANDARD_HASH('palacinka', 'SHA1'), 1, 0.12, 'vyskoleny-a-rozeny', 'Ondysovci', 'gymzl', 'doktor', 1701011234);
INSERT INTO KOUZELNIK(Jmeno, Narozen, Heslo, Uroven, Mana, Typ, Skola, Titul, RodneCislo)
VALUES ('Chaos Chaotický', TO_DATE('2002-10-12', 'yyyy/mm/dd'), STANDARD_HASH('heslo123', 'SHA1'), 1000, 100.2, 'vyskoleny', 'gymzl', 'doktor',6307023333);
INSERT INTO KOUZELNIK(Jmeno, Narozen, Heslo, Uroven, Mana, Typ, Skola, Titul, RodneCislo)
VALUES ('Gandalf', TO_DATE('1853-12-3', 'yyyy/mm/dd'), STANDARD_HASH('5neprojdesdal.', 'SHA1'), 425, 98.3, 'vyskoleny', 'Stredozemni skola kouzel', 'sedy', 400422001);

INSERT INTO ZAMESTNANEC(Jmeno, Narozen, Heslo, RodneCislo)
VALUES ('Jakub Busman', TO_DATE('2001-09-11', 'yyyy/mm/dd'), STANDARD_HASH('Sibir','SHA1'), 1707014507);
INSERT INTO ZAMESTNANEC(Jmeno, Narozen, Heslo, RodneCislo)
VALUES ('Ondøej Štancl', TO_DATE('1978-02-14', 'yyyy/mm/dd'), STANDARD_HASH('JeToTam','SHA1'), 1707014507);

INSERT INTO ELEMENT_(Typ, Specializace, Barva)
VALUES ('Magnet','Neco','Cervena');
INSERT INTO ELEMENT_(Typ, Specializace, Barva)
VALUES ('Oheò','Neco','Zelena');

INSERT INTO DOBIJECIMISTO(Nazev, Adresa, Mira, ElementID)
VALUES ('U Lesa', 'U Lesa 33', 100, 1);
INSERT INTO DOBIJECIMISTO(Nazev, Adresa, Mira, ElementID)
VALUES ('Bozetechova', 'Bozetechova 420', 105, 2);

INSERT INTO KOUZLO(Nazev, Slozitost, Sila, Typ, PrimaryElementID)
VALUES('AvadaKedabra', 'A', 0, 'Utocne', 1);
INSERT INTO KOUZLO(Nazev, Slozitost, Sila, Typ, PrimaryElementID)
VALUES('OhnivusObranus', 'C', 1, 'Obranne', 2);
INSERT INTO KOUZLO(Nazev, Slozitost, Sila, Typ, PrimaryElementID)
VALUES('OhnivusUtocnus', 'S', 0, 'Utocne', 2);

INSERT INTO GRIMOAR(Stav, Vydrz, PosledniNabiti, ElementID)
VALUES('Nový', 100, TO_DATE('2019-03-20', 'yyyy/mm/dd'), 1);
INSERT INTO GRIMOAR(Stav, Vydrz, PosledniNabiti, ElementID)
VALUES('Nový', 40, TO_DATE('2019-03-21', 'yyyy/mm/dd'), 2);


INSERT INTO SVITEK(SvitekID, KouzloID)
VALUES(1,1);
INSERT INTO SVITEK(SvitekID, KouzloID)
VALUES(2,2);
INSERT INTO SVITEK(SvitekID, KouzloID)
VALUES(3,3);

INSERT INTO SVITEKKOUZELNIKVLASTNI(SvitekID, KouzelnikID, KouzloID, Vlastni)
VALUES (1,1,1,1);
INSERT INTO SVITEKKOUZELNIKVLASTNI(SvitekID, KouzelnikID, KouzloID, Vlastni)
VALUES (2,3,2,2);
INSERT INTO SVITEKKOUZELNIKVLASTNI(SvitekID, KouzelnikID, KouzloID, Vlastni)
VALUES (3,2,3,2);


INSERT INTO GRIMOARKOUZELNIKVLASTNI(KouzelnikID, GrimoarID, OD, DO_)
VALUES (2,1,TO_DATE('2019-03-22', 'yyyy/mm/dd'),TO_DATE('2019-03-25', 'yyyy/mm/dd'));
INSERT INTO GRIMOARKOUZELNIKVLASTNI(KouzelnikID, GrimoarID, OD, DO_)
VALUES (1,2,TO_DATE('2019-03-22', 'yyyy/mm/dd'),TO_DATE('2019-03-28', 'yyyy/mm/dd'));

INSERT INTO ELEMENTJEVEDLEJSIMELEMENTEMKOUZLU(ElementID, KouzloID)
VALUES(1,1);
INSERT INTO ELEMENTJEVEDLEJSIMELEMENTEMKOUZLU(ElementID, KouzloID)
VALUES(2,1);
INSERT INTO ELEMENTJEVEDLEJSIMELEMENTEMKOUZLU(ElementID, KouzloID)
VALUES(1,2);

INSERT INTO ELEMENTKOUZELNIK(ElementID,KouzelnikID)
VALUES(1,3);
INSERT INTO ELEMENTKOUZELNIK(ElementID,KouzelnikID)
VALUES(2,3);

INSERT INTO GRIMOARKOUZELNIKDOBITIVAZBA(KouzelnikID, GrimoarID)
VALUES (2,1);
INSERT INTO GRIMOARKOUZELNIKDOBITIVAZBA(KouzelnikID, GrimoarID)
VALUES (1,2);

INSERT INTO GRIMOARMISTO(MistoID, GrimoarID)
VALUES (1,1);
INSERT INTO GRIMOARMISTO(MistoID, GrimoarID)
VALUES (2,2);

INSERT INTO GRIMOARZAMESTNANEC(ZamestnanecID, GrimoarID, Datum)
VALUES (1,1, TO_DATE('2012-01-07', 'yyyy/mm/dd'));
INSERT INTO GRIMOARZAMESTNANEC(ZamestnanecID, GrimoarID, Datum)
VALUES (2,2, TO_DATE('2012-02-07', 'yyyy/mm/dd'));

INSERT INTO ZAMESTNANECSPRAVUJEKOUZLO(ZamestnanecID, KouzloID, Spravuje)
VALUES (2,1, TO_DATE('2012-01-07', 'yyyy/mm/dd'));
INSERT INTO ZAMESTNANECSPRAVUJEKOUZLO(ZamestnanecID, KouzloID, Spravuje)
VALUES (2,2, TO_DATE('2012-01-07', 'yyyy/mm/dd'));
INSERT INTO ZAMESTNANECSPRAVUJEKOUZLO(ZamestnanecID, KouzloID, Spravuje)
VALUES (1,3, TO_DATE('2012-01-07', 'yyyy/mm/dd'));

INSERT INTO GRIMOARKOUZLO(GrimoarID, KouzloID)
VALUES (1,1);
INSERT INTO GRIMOARKOUZLO(GrimoarID, KouzloID)
VALUES (1,2);
INSERT INTO GRIMOARKOUZLO(GrimoarID, KouzloID)
VALUES (2,3);

--------------------------------------------------------------------------------
--TRIGGERY
--Pri kazdem novem pridanem kouzlu se k nemu automaticky priradi prvni zamestnanec
CREATE OR REPLACE TRIGGER auto_prirazeni
    AFTER INSERT ON Kouzlo
    FOR EACH ROW
    BEGIN
        INSERT INTO ZamestnanecSpravujeKouzlo(ZamestnanecID, KouzloID, Spravuje) VALUES(1, :new.KouzloID, CURRENT_TIMESTAMP);
    END;
/
--demonstrace vyse deklarovaneho triggeru
INSERT INTO KOUZLO(Nazev, Slozitost, Sila, Typ, PrimaryElementID)
VALUES('DalsiKouzlo', 'A', 29, 'Utocne', 2);
INSERT INTO KOUZLO(Nazev, Slozitost, Sila, Typ, PrimaryElementID)
VALUES('JesteJedno', 'S', 76, 'Utocne', 1);

--Trigger, ktery podle stavu vydrze usoudi, zda je grimoar jeste aktivni a nemusi se dobit
CREATE OR REPLACE TRIGGER pouzitelnost_grimoaru
    BEFORE INSERT OR UPDATE OF Vydrz ON Grimoar
    FOR EACH ROW
    BEGIN
        IF :new.Vydrz < 25 OR (:new.Stav IS NULL AND :new.Vydrz < 25) THEN
            :new.Stav := 'Použitý';
        ELSIF (:new.Vydrz >= 25 AND :new.Vydrz < 75) OR (:new.Stav IS NULL AND :new.Vydrz >= 25 AND :new.Vydrz < 75) THEN
            :new.Stav := 'Opotøebovaný';
        ELSE
            :new.Stav := 'Nový';
        END IF;
    END;
/
--Demonstrace
--UPDATE druheho grimoaru na 'Opotøebovaný'
UPDATE Grimoar SET Vydrz = 50 WHERE GrimoarID = 2;

--INSERT bez uvedeni Stavu
--Vlozeni "Nového" grimoaru
INSERT INTO GRIMOAR(Vydrz, PosledniNabiti, ElementID)
VALUES(80, CURRENT_TIMESTAMP, 2);
--Vlozeni "Použitého" grimoaru
INSERT INTO GRIMOAR(Vydrz, PosledniNabiti, ElementID)
VALUES(21, CURRENT_TIMESTAMP, 2);
--Vlozeni "Opotøebovaného" grimoaru se spatnym stavem
--Prepise se na odpovídající stav
INSERT INTO GRIMOAR(Stav, Vydrz, PosledniNabiti, ElementID)
VALUES('Nový', 31, CURRENT_TIMESTAMP, 1);

--------------------------------------------------------------------------------
--EXPLAIN PLAN
--Naplneni vice testovacich hodnot
INSERT INTO GRIMOARKOUZELNIKVLASTNI(KouzelnikID, GrimoarID, OD, DO_)
VALUES (3,4, CURRENT_TIMESTAMP ,TO_DATE('2019-03-28', 'yyyy/mm/dd'));
INSERT INTO GRIMOARKOUZELNIKVLASTNI(KouzelnikID, GrimoarID, OD, DO_)
VALUES (2,3, CURRENT_TIMESTAMP ,TO_DATE('2019-03-28', 'yyyy/mm/dd'));

--Zvoli kouzelniky z rodu 'Ondysovci' a kteri vlastni dva grimoary
EXPLAIN PLAN FOR
SELECT Jmeno, COUNT(*) FROM Kouzelnik NATURAL JOIN grimoarkouzelnikvlastni 
    WHERE Rod='Ondysovci' 
    GROUP BY Jmeno 
    HAVING COUNT(*) = 2;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

--INDEX
--Vytvoreni indexu pro optimalizaci, seskupi podle ID kouzelnika
CREATE INDEX kouzelnik_vlastni ON grimoarkouzelnikvlastni (KouzelnikID);

--Znovu, lepsi vysledek
EXPLAIN PLAN FOR
SELECT Jmeno, COUNT(*) FROM Kouzelnik NATURAL JOIN grimoarkouzelnikvlastni 
    WHERE Rod='Ondysovci' 
    GROUP BY Jmeno 
    HAVING COUNT(*) = 2;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

--------------------------------------------------------------------------------
--Procedury

--jaké procento kouzel má za primární element oheò
CREATE OR REPLACE PROCEDURE Ohen_proc
IS
    POCET_VSECH NUMBER;
    POCET_OHNIVYCH NUMBER;
    PROC NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO POCET_VSECH
    FROM Kouzlo;
    SELECT COUNT(*)
    INTO POCET_OHNIVYCH
    FROM Kouzlo k, Element_ e
    WHERE e.ElementID = k.PrimaryElementID AND
          e.Typ = 'Oheò';
    PROC := (POCET_OHNIVYCH/POCET_VSECH) *100;
    PROC := ROUND(PROC, 2);
    DBMS_OUTPUT.PUT_LINE(CONCAT(CONCAT('Procento primárnì ohnivých kouzel: ', PROC), ' %'));
    EXCEPTION
    WHEN zero_divide THEN
    DBMS_OUTPUT.PUT_LINE('Dìlení nulou');
    WHEN no_data_found THEN
    DBMS_OUTPUT.PUT_LINE('Nebyla nalezena žádná data');
END;
/

--Priklad spusteni
BEGIN 
    Ohen_proc; 
END;
/

--Vypise 30 prvnich kouzelniku pod 30 let s urovní >= než zadanou v argumentu
--Pokud je v databazi kouzelniku ménì jak 30, vypíše tolik, kolik lze vypsat
CREATE OR REPLACE PROCEDURE k_30pod30(level Kouzelnik.Uroven%TYPE)
IS
    CURSOR kouzelnici IS(
        SELECT * FROM Kouzelnik
        WHERE Kouzelnik.Uroven >= level
        );
    AGE_temp NUMBER;
    k_Cnt INTEGER;
BEGIN
    k_Cnt := 0;
    FOR ITEM in kouzelnici
    LOOP
        if k_Cnt >= 30 then
            EXIT;
        end if;

        k_30pod30.AGE_temp := TRUNC(months_between(sysdate, ITEM.Narozen) / 12);
        if AGE_temp < 30 THEN
            DBMS_OUTPUT.PUT_LINE(ITEM.Jmeno);
            k_Cnt := k_Cnt+1;
        end if;
    end loop;
end;
/

--Priklad spusteni
BEGIN 
    k_30pod30(30); 
END;
/
--------------------------------------------------------------------------------
--Materialized view

--materializovany pohled který zobrazí kouzelniky spolecne s jejich urovni
CREATE MATERIALIZED VIEW urovne_kouzelniku_mv
    REFRESH on commit
AS
    SELECT KouzelnikID, Jmeno, UROVEN
    FROM Kouzelnik;

--demonstrace materializovaneho pohledu

CREATE OR REPLACE PROCEDURE Demonstrate_mv
IS
    POCET INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO POCET
    FROM UROVNE_KOUZELNIKU_MV;

    DBMS_OUTPUT.PUT_LINE(CONCAT('Pocet zaznamu v materializovanem pohledu je ', POCET));

    --vlozeni hodnoty do tabulky
    INSERT INTO KOUZELNIK(Jmeno, Narozen, Heslo, Uroven, Mana, Typ, Rod, RodneCislo)
    VALUES ('Boris Kouzelný', TO_DATE('1992-05-29', 'yyyy/mm/dd'), STANDARD_HASH('jsemfrajer3', 'SHA1'), 5, 2.9, 'rozeny', 'Borisovec', 9205290523);
    BEGIN
        --Protoze mv se sam neobnovuje, musime to udelat manualne
        DBMS_MVIEW.REFRESH('UROVNE_KOUZELNIKU_MV');
    END;
    SELECT COUNT(*)
    INTO POCET
    FROM UROVNE_KOUZELNIKU_MV;

    --materialized view se aktualizoval
    DBMS_OUTPUT.PUT_LINE(CONCAT('Pocet zaznamu v materializovanem pohledu po vlozeni dat je ', POCET));
    --uvedeni do puvodniho stavu
    DELETE FROM Kouzelnik WHERE RODNECISLO = 9205290523;
end;
/

--Ukazka mv
BEGIN 
    demonstrate_mv; 
END;
/

--------------------------------------------------------------------------------
--Pristupova prava

--Pro tabulky
GRANT ALL ON Kouzelnik TO xbabek02;
GRANT ALL ON Element_ TO xbabek02;
GRANT ALL ON DobijeciMisto TO xbabek02;
GRANT ALL ON Kouzlo TO xbabek02;
GRANT ALL ON Grimoar TO xbabek02;
GRANT ALL ON Zamestnanec TO xbabek02;
GRANT ALL ON Svitek TO xbabek02;
GRANT ALL ON SvitekKouzelnikVlastni TO xbabek02;
GRANT ALL ON GrimoarKouzelnikVlastni TO xbabek02;
GRANT ALL ON ElementJeVedlejsimElementemKouzlu TO xbabek02;
GRANT ALL ON ElementKouzelnik TO xbabek02;
GRANT ALL ON GrimoarKouzelnikDobitiVazba TO xbabek02;
GRANT ALL ON GrimoarMisto TO xbabek02;
GRANT ALL ON GrimoarZamestnanec TO xbabek02;
GRANT ALL ON ZamestnanecSpravujeKouzlo TO xbabek02;
GRANT ALL ON GrimoarKouzlo TO xbabek02;

--Pro procedury
GRANT EXECUTE ON k_30pod30 TO xbabek02;
GRANT EXECUTE ON Ohen_proc TO xbabek02;

--Pro MV
GRANT ALL ON urovne_kouzelniku_mv TO xbabek02;


